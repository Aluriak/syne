"""Generate mapping from note to wavelength
from an internet web page using beautiful soup,
and save it locally for quick futur access.

NOT USED ANYMORE BECAUSE musthe IS PROVIDING FREQUENCIES DATA

"""

import sys
import requests
from bs4 import BeautifulSoup

TARGET = 'notes_wavelength.py'


def load_from_target() -> dict or None:
    "Try to import target module, and returning its data, or returns None"
    import importlib
    try:
        module = importlib.import_module(TARGET[:-3])
    except ImportError:
        return None
    return module.WAVELENGTH


def get_html(url:str) -> str:
    "return parsed html"
    return BeautifulSoup(requests.get(url).text, 'html.parser')


def yield_nodes() -> (str, float):
    "Yield pairs of note and their wavelength"
    soup = get_html('http://pages.mtu.edu/~suits/notefreqs.html')

    for tr in soup.find_all('tr'):
        tds = tuple(tr.find_all('td'))
        extract = lambda td: td.text.strip()
        if len(tds) == 3:
            notes, wavelength, _ = map(extract, tds)
            for note in notes.split('/'):
                yield note, float(wavelength)


WAVELENGTH = load_from_target()
if not WAVELENGTH:  # not available locally
    if __name__ == '__main__':
        print('Data not available locally ({}). Parse web sourceâ€¦'.format(TARGET))
    # save dictionnary into notes_wavelength.py
    with open(TARGET, 'w') as fd:
        fd.write('# generated by ' + sys.argv[0] + '\n')
        fd.write('WAVELENGTH = ' + str(dict(yield_nodes())))
    WAVELENGTH = load_from_target()
if __name__ == '__main__':
    print('Data available locally:', WAVELENGTH)
